# Pytest configuration for Foundational Flower Detector
# Scientific testing framework with real data validation

[tool:pytest]
minversion = 7.0
testpaths = tests
python_files = test_*.py
python_functions = test_*
python_classes = Test*

# Test output configuration
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --maxfail=10
    --durations=10
    --cov=src
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=75
    -p no:warnings

# Filter warnings for cleaner output
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning
    # TensorFlow specific warnings
    ignore:.*TensorFlow.*:UserWarning
    ignore:.*tensorflow.*:DeprecationWarning

# Test markers for categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    slow: Tests that take longer to run (>1 second)
    data_dependent: Tests that require real data files
    cpu: Tests optimized for CPU-only execution
    gpu: Tests that require GPU (currently unused)
    network: Tests that require network access

# Test discovery patterns
norecursedirs = 
    .git
    .tox
    dist
    build
    *.egg
    __pycache__
    .pytest_cache
    htmlcov
    .coverage*
    node_modules

# Timeout configuration (prevent hanging tests)
timeout = 300
timeout_method = thread

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
